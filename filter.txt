#include <vector>

// デジタルフィルタ
class Filter
{
public:
	// コンストラクタ
	Filter();
	// デストラクタ
	~Filter();

	// ローパス
	void LowPass(const unsigned int& sample, const float& cutoff, const float& q);
	// ハイパス
	void HighPass(const unsigned int& sample, const float& cutoff, const float& q);
	// バンドパス
	void BandPass(const unsigned int& sample, const float& cutoff, const float& bw);
	// ノッチフィルタ
	void Notch(const unsigned int& sample, const float& cutoff, const float& bw);
	// ローシェルフ
	void LowShelf(const unsigned int& sample, const float& cutoff, const float& gain, const float& q);
	// ハイシェルフ
	void HighShelf(const unsigned int& sample, const float& cutoff, const float& gain, const float& q);
	// ピーキング
	void Peaking(const unsigned int& sample, const float& cutoff, const float& gain, const float& bw);
	// オールパス
	void AllPass(const unsigned int& sample, const float& cutoff, const float& q);

	// 実行
	void Execution(std::vector<float>& input);

private:
	Filter(const Filter&) = delete;
	void operator=(const Filter&) = delete;


	// 入力値
	float input[2];

	// 出力
	float out[2];

	// フィルタ係数A
	float a[3];

	// フィルタ係数B
	float b[3];

---------------------------------------------------------------------------

#include "Filter.h"
#include "../SoundFunc/SoundFunc.h"

// コンストラクタ
Filter::Filter()
{
	memset(&input[0], 0, sizeof(input));
	memset(&out[0],   0, sizeof(out));
	memset(&a[0],     0, sizeof(a));
	memset(&b[0],     0, sizeof(b));
	a[0] = 1.0f;
	b[0] = 1.0f; 
}

// デストラクタ
Filter::~Filter()
{
}

// ローパス
void Filter::LowPass(const unsigned int& sample, const float& cutoff, const float& q)
{
	float omega = 2.0f * snd::PI() * cutoff / sample;
	float alpha = std::sin(omega) / (2.0f * q);

	a[0] =  1.0f + alpha;
	a[1] = -2.0f * std::cos(omega);
	a[2] =  1.0f - alpha;

	b[0] = (1.0f - std::cos(omega)) / 2.0f;
	b[1] =  1.0f - std::cos(omega);
	b[2] = (1.0f - std::cos(omega)) / 2.0f;
}

// ハイパス
void Filter::HighPass(const unsigned int& sample, const float& cutoff, const float& q)
{
	float omega = 2.0f * snd::PI() * cutoff / sample;
	float alpha = std::sin(omega) / (2.0f * q);

	a[0] =  1.0f + alpha;
	a[1] = -2.0f * std::cos(omega);
	a[2] =  1.0f - alpha;

	b[0] =  (1.0f + std::cos(omega)) / 2.0f;
	b[1] = -(1.0f + std::cos(omega));
	b[2] =  (1.0f + std::cos(omega)) / 2.0f;
}

// バンドパス
void Filter::BandPass(const unsigned int & sample, const float & cutoff, const float & bw)
{
	float omega = 2.0f * snd::PI() * cutoff / sample;
	float alpha = std::sin(omega) * std::sinh(logf(2.0f) / 2.0f * bw * omega / std::sin(omega));

	a[0] =  1.0f + alpha;
	a[1] = -2.0f * std::cos(omega);
	a[2] =  1.0f - alpha;

	b[0] =  alpha;
	b[1] =  0.0f;
	b[2] = -alpha;
}

// ノッチフィルタ
void Filter::Notch(const unsigned int& sample, const float& cutoff, const float& bw)
{
	float omega = 2.0f * snd::PI() * cutoff / sample;
	float alpha = std::sin(omega) * std::sinh(std::log(2.0f) / 2.0f * bw * omega / std::sin(omega));

	a[0] =  1.0f + alpha;
	a[1] = -2.0f * std::cos(omega);
	a[2] =  1.0f - alpha;

	b[0] =  1.0f;
	b[1] = -2.0f * std::cos(omega);
	b[2] =  1.0f;
}

// ローシェルフ
void Filter::LowShelf(const unsigned int& sample, const float& cutoff, const float& gain, const float& q)
{
	float omega = 2.0f * snd::PI() * cutoff / sample;
	float alpha = std::sin(omega) / (2.0f * q);
	float A     = std::pow(10.0f, (gain / 40.0f));
	float beta  = std::sqrt(A) / q;

	a[0] =  (A + 1.0f) + (A - 1.0f) * std::cos(omega) + beta * std::sin(omega);
	a[1] = -2.0f                    * ((A - 1.0f)     + (A + 1.0f) * std::cos(omega));
	a[2] =  (A + 1.0f) + (A - 1.0f) * std::cos(omega) - beta       * std::sin(omega);

	b[0] =    A * ((A + 1.0f) - (A - 1.0f) * std::cos(omega) + beta       * std::sin(omega));
	b[1] = 2.0f * A                        * ((A - 1.0f)     - (A + 1.0f) * std::cos(omega));
	b[2] =    A * ((A + 1.0f) - (A - 1.0f) * std::cos(omega) - beta       * std::sin(omega));
}

// ハイシェルフ
void Filter::HighShelf(const unsigned int& sample, const float& cutoff, const float& gain, const float& q)
{
	float omega = 2.0f * snd::PI() *  cutoff / sample;
	float alpha = std::sin(omega) / (2.0f * q);
	float A     = std::pow(10.0f, (gain / 40.0f));
	float beta  = std::sqrt(A) / q;

	a[0] = (A + 1.0f) - (A - 1.0f) * std::cos(omega) + beta       * std::sin(omega);
	a[1] =  2.0f                   * ((A - 1.0f)     - (A + 1.0f) * std::cos(omega));
	a[2] = (A + 1.0f) - (A - 1.0f) * std::cos(omega) - beta       * std::sin(omega);

	b[0] =     A * ((A + 1.0f) + (A - 1.0f) * std::cos(omega) + beta       * std::sin(omega));
	b[1] = -2.0f * A                        * ((A - 1.0f)     + (A + 1.0f) * std::cos(omega));
	b[2] =     A * ((A + 1.0f) + (A - 1.0f) * std::cos(omega) - beta       * std::sin(omega));
}

// ピーキング
void Filter::Peaking(const unsigned int& sample, const float& cutoff, const float& gain, const float& bw)
{
	float omega = 2.0f * snd::PI() *  cutoff / sample;
	float alpha = std::sin(omega) * std::sinh(std::log(2.0f) / 2.0f * bw * omega / std::sin(omega));
	float A     = std::pow(10.0f, (gain / 40.0f));

	a[0] =  1.0f + alpha / A;
	a[1] = -2.0f * std::cos(omega);
	a[2] =  1.0f - alpha / A;

	b[0] =  1.0f + alpha * A;
	b[1] = -2.0f * std::cos(omega);
	b[2] =  1.0f - alpha * A;
}

// オールパス
void Filter::AllPass(const unsigned int& sample, const float& cutoff, const float& q)
{
	float omega = 2.0f * snd::PI() *  cutoff / sample;
	float alpha = std::sin(omega) / (2.0f * q);

	a[0] =  1.0f + alpha;
	a[1] = -2.0f * std::cos(omega);
	a[2] =  1.0f - alpha;

	b[0] =  1.0f - alpha;
	b[1] = -2.0f * std::cos(omega);
	b[2] =  1.0f + alpha;
}

// 実行
void Filter::Execution(std::vector<float>& input)
{
	for (float& i : input)
	{
		//変換前保持
		float tmp = i;

		i = b[0] / a[0] * tmp
		  + b[1] / a[0] * this->input[0]
		  + b[2] / a[0] * this->input[1]
		  - a[1] / a[0] * out[0]
		  - a[2] / a[0] * out[1];

		this->input[1] = this->input[0];
		this->input[0] = tmp;

		out[1] = out[0];
		out[0] = i;
	}
}


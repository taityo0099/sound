フーリエ変換

std::vector<std::complex<float>> Func::DFT(const std::vector<float>& data)
{
	std::vector<std::complex<float>>tmp(data.size());

	const std::complex<float>imaginary(0, 1);

	//公式のF(t)の枠組み
	for (size_t i = 0; i < data.size(); ++i)
	{
		//公式のΣの枠組み
		for (size_t k = 0; k < data.size(); ++k)
		{
			tmp[i] += data[k] * std::exp(-imaginary * 2.0f * std::acos(-1.0f) * float(i * k) / (float)data.size());

		}
	}
	return tmp;

}

//読み取り

tは時間	i
F= tmp
x = data
e-i = std::exp(-imaginary)
N = data.size

図で書いてみる
F(t) = x(t)exp(-i * 2.0f * π * (t*x)/ N)